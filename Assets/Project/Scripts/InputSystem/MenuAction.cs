//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Project/Scripts/InputSystem/MenuAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuAction"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""14578375-a1d5-42a2-997e-68f57f7e2295"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""d352e7f8-00c6-4ca6-944b-cdb9e522afd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f73aace0-9ead-4fed-b282-b99c37d9f69d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""849b704c-233b-4868-b808-261907d84221"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f467693-0d4d-49c8-8de4-ec86ae176d47"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIInputs"",
            ""id"": ""519ecbdd-1ddb-4b43-96c0-6bc9d4d93eee"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""56735907-d5b7-4d89-a1eb-4bfa63ed876b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0f0d163-7040-4108-9573-245095639cdb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c224f1a4-5699-4f92-9b0f-df52fb6a42fb"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ControllerScroll"",
            ""id"": ""835630ac-171a-46a3-a0ac-19ece8119e3c"",
            ""actions"": [
                {
                    ""name"": ""ScrollerRight"",
                    ""type"": ""Button"",
                    ""id"": ""18744b99-69e7-420e-852c-f7256507d64e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollerLeft"",
                    ""type"": ""Button"",
                    ""id"": ""872f68f4-42fc-452c-ba43-e58fa8df48e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69f761e4-99af-4040-93d5-b99661265c22"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b4811c1-51f0-4614-ae2e-2c6d8bac17d6"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseClick = m_Mouse.FindAction("MouseClick", throwIfNotFound: true);
        m_Mouse_MousePosition = m_Mouse.FindAction("MousePosition", throwIfNotFound: true);
        // UIInputs
        m_UIInputs = asset.FindActionMap("UIInputs", throwIfNotFound: true);
        m_UIInputs_Back = m_UIInputs.FindAction("Back", throwIfNotFound: true);
        // ControllerScroll
        m_ControllerScroll = asset.FindActionMap("ControllerScroll", throwIfNotFound: true);
        m_ControllerScroll_ScrollerRight = m_ControllerScroll.FindAction("ScrollerRight", throwIfNotFound: true);
        m_ControllerScroll_ScrollerLeft = m_ControllerScroll.FindAction("ScrollerLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_MouseClick;
    private readonly InputAction m_Mouse_MousePosition;
    public struct MouseActions
    {
        private @MenuAction m_Wrapper;
        public MouseActions(@MenuAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_Mouse_MouseClick;
        public InputAction @MousePosition => m_Wrapper.m_Mouse_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @MouseClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseClick;
                @MousePosition.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // UIInputs
    private readonly InputActionMap m_UIInputs;
    private IUIInputsActions m_UIInputsActionsCallbackInterface;
    private readonly InputAction m_UIInputs_Back;
    public struct UIInputsActions
    {
        private @MenuAction m_Wrapper;
        public UIInputsActions(@MenuAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_UIInputs_Back;
        public InputActionMap Get() { return m_Wrapper.m_UIInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIInputsActions set) { return set.Get(); }
        public void SetCallbacks(IUIInputsActions instance)
        {
            if (m_Wrapper.m_UIInputsActionsCallbackInterface != null)
            {
                @Back.started -= m_Wrapper.m_UIInputsActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_UIInputsActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_UIInputsActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_UIInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public UIInputsActions @UIInputs => new UIInputsActions(this);

    // ControllerScroll
    private readonly InputActionMap m_ControllerScroll;
    private IControllerScrollActions m_ControllerScrollActionsCallbackInterface;
    private readonly InputAction m_ControllerScroll_ScrollerRight;
    private readonly InputAction m_ControllerScroll_ScrollerLeft;
    public struct ControllerScrollActions
    {
        private @MenuAction m_Wrapper;
        public ControllerScrollActions(@MenuAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScrollerRight => m_Wrapper.m_ControllerScroll_ScrollerRight;
        public InputAction @ScrollerLeft => m_Wrapper.m_ControllerScroll_ScrollerLeft;
        public InputActionMap Get() { return m_Wrapper.m_ControllerScroll; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerScrollActions set) { return set.Get(); }
        public void SetCallbacks(IControllerScrollActions instance)
        {
            if (m_Wrapper.m_ControllerScrollActionsCallbackInterface != null)
            {
                @ScrollerRight.started -= m_Wrapper.m_ControllerScrollActionsCallbackInterface.OnScrollerRight;
                @ScrollerRight.performed -= m_Wrapper.m_ControllerScrollActionsCallbackInterface.OnScrollerRight;
                @ScrollerRight.canceled -= m_Wrapper.m_ControllerScrollActionsCallbackInterface.OnScrollerRight;
                @ScrollerLeft.started -= m_Wrapper.m_ControllerScrollActionsCallbackInterface.OnScrollerLeft;
                @ScrollerLeft.performed -= m_Wrapper.m_ControllerScrollActionsCallbackInterface.OnScrollerLeft;
                @ScrollerLeft.canceled -= m_Wrapper.m_ControllerScrollActionsCallbackInterface.OnScrollerLeft;
            }
            m_Wrapper.m_ControllerScrollActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ScrollerRight.started += instance.OnScrollerRight;
                @ScrollerRight.performed += instance.OnScrollerRight;
                @ScrollerRight.canceled += instance.OnScrollerRight;
                @ScrollerLeft.started += instance.OnScrollerLeft;
                @ScrollerLeft.performed += instance.OnScrollerLeft;
                @ScrollerLeft.canceled += instance.OnScrollerLeft;
            }
        }
    }
    public ControllerScrollActions @ControllerScroll => new ControllerScrollActions(this);
    public interface IMouseActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IUIInputsActions
    {
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IControllerScrollActions
    {
        void OnScrollerRight(InputAction.CallbackContext context);
        void OnScrollerLeft(InputAction.CallbackContext context);
    }
}
